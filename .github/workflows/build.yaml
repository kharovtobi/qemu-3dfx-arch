# Default YAML
# Line wrap recommended
# Don't forget to change variables every QEMU update!
name: Build QEMU-3dfx binaries 

on:
  workflow_dispatch:
  
jobs:
   Windows:
   
     runs-on: windows-2019       
     env:
      pkgver: '9.1.1'
      patch:  '00-qemu91x-mesa-glide.patch'
      mspkg: 'mingw-w64-x86_64'
      
     steps:  
     - name: Checkout repo
       uses: actions/checkout@v4
       
     - name: Setup MSYS2
       uses: msys2/setup-msys2@v2
       with:
         msystem: MINGW64
         update: true
         install: >-
          base 
          base-devel 
          rsync 
          patch 
          ninja 
          wget 
          git 
          ${{ env.mspkg }}-python
          ${{ env.mspkg }}-python-setuptools
          ${{ env.mspkg }}-python-distlib
          ${{ env.mspkg }}-python-sphinx
          ${{ env.mspkg }}-python-sphinx_rtd_theme
          ${{ env.mspkg }}-cairo
          ${{ env.mspkg }}-capstone
          ${{ env.mspkg }}-curl
          ${{ env.mspkg }}-dtc
          ${{ env.mspkg }}-gcc
          ${{ env.mspkg }}-gdk-pixbuf2
          ${{ env.mspkg }}-glib2
          ${{ env.mspkg }}-gnutls
          ${{ env.mspkg }}-gtk3
          ${{ env.mspkg }}-libcacard
          ${{ env.mspkg }}-libepoxy
          ${{ env.mspkg }}-libnfs
          ${{ env.mspkg }}-libpng
          ${{ env.mspkg }}-libslirp
          ${{ env.mspkg }}-libssh
          ${{ env.mspkg }}-libusb
          ${{ env.mspkg }}-libxml2
          ${{ env.mspkg }}-lzo2
          ${{ env.mspkg }}-meson
          ${{ env.mspkg }}-ncurses
          ${{ env.mspkg }}-pixman
          ${{ env.mspkg }}-pcre2
          ${{ env.mspkg }}-SDL2
          ${{ env.mspkg }}-SDL2_image
          ${{ env.mspkg }}-snappy
          ${{ env.mspkg }}-spice
          ${{ env.mspkg }}-spice-protocol
          ${{ env.mspkg }}-usbredir
          ${{ env.mspkg }}-virglrenderer
          ${{ env.mspkg }}-zlib
          ${{ env.mspkg }}-zstd

     - name: Extracting build
       continue-on-error: true
       shell: msys2 {0}
       run:  |
        echo "Downloading src"
        wget -q https://download.qemu.org/qemu-${{ env.pkgver }}.tar.xz
        echo "Extracting src"
        tar xf qemu-${{ env.pkgver }}.tar.xz 
        echo "Don't mind the error, It's a windows feature"
        
     - name: Patching build
       shell: msys2 {0}
       run:  |
        echo "Adding files to src"
        rsync -rv qemu-0/hw/3dfx qemu-1/hw/mesa qemu-${{ env.pkgver }}/hw/
        cd qemu-${{ env.pkgver }}
        echo "Patching files to src"
        patch -p0 -i ../${{ env.patch }}
        echo "Signing commit id to src"
        bash ../scripts/sign_commit

     - name: Configure build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Configuring build"
        ../qemu-${{ env.pkgver }}/configure --disable-werror --target-list=i386-softmmu --prefix=/usr --enable-opengl --enable-whpx --enable-gtk --enable-gtk-clipboard --enable-sdl --enable-sdl-image --enable-libusb

     - name: Compile build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Compiling Build"
        make -j2   

     - name: Installing build
       working-directory: ./build
       shell: msys2 {0}
       run: |
        echo "Installing build to output"
        make DESTDIR=./output install
        echo "Finished build at $(date)"

       
     - name: Uploading build
       uses: actions/upload-artifact@v4
       with:
        name: bin-windows-${{ env.pkgver }}-artifact
        path: ./build/output/a/_temp/msys64/usr

   Wrappers:
            runs-on: ubuntu-latest
            env:
             pkgver: '9.1.1'
            steps:
              - name: Checkout repo
                uses: actions/checkout@v4
                
              - name: Install dependencies
                uses: ConorMacBride/install-package@v1
                with:
                  apt: >
                    meson
                    binutils-mips-linux-gnu
                    ninja-build
                    bsdmainutils
                    build-essential
                    libaudiofile-dev
                    binutils-mingw-w64-i686
                    libdigest-sha-perl
                    mingw-w64-tools
                    libsdl2-dev
                    libusb-1.0-0-dev
                    libfl2
                    libfl-dev
                    g++-mingw-w64-i686
                    g++-10-multilib
                    gcc-10-multilib
                    gcc-mingw-w64-i686-win32-runtime
                    g++-mingw-w64-i686-win32
                    gcc-mingw-w64-i686
                    mingw-w64-i686-dev
                    mingw-w64-common
                    libx11-dev
                    libcapstone-dev
                    pkgconf
                    python3
                    git
                    genisoimage

              - name: Adding optional support
                run:  |
                 echo "Downloading watcom"
                 wget -q https://github.com/open-watcom/open-watcom-v2/releases/download/Current-build/ow-snapshot.tar.xz
                 echo "Downloading djgpp"
                 wget -q https://github.com/andrewwutw/build-djgpp/releases/download/v3.4/djgpp-linux64-gcc1220.tar.bz2
                 mkdir watcom
                 echo "Extracting watcom"
                 tar xf ow-snapshot.tar.xz -C watcom
                 echo "Extracting djgpp"
                 tar xf djgpp-linux64-gcc1220.tar.bz2
                 cp -v djgpp/i586-pc-msdosdjgpp/bin/dxe* djgpp/bin

              - name: Compile wrappers
                run: |
                  echo "Adding Enviromental Variables"
                  export WATCOM=$(pwd)/watcom
                  export PATH=$WATCOM/binl64:$WATCOM/binl:$PATH
                  export EDPATH=$WATCOM/eddat
                  export INCLUDE=$WATCOM/lh
                  export PATH=$(pwd)/djgpp/bin:$PATH
                  echo "Compiling 3dfx wrappers"
                  cd wrappers/3dfx
                  mkdir build && cd build
                  bash ../../../scripts/conf_wrapper
                  make && make clean
                  echo "Compiling Mesa wrappers"
                  cd ../../mesa
                  mkdir build && cd build
                  bash ../../../scripts/conf_wrapper
                  make && make clean

              - name: Installing wrappers
                working-directory: ./wrappers/iso
                run: |
                 echo "Making Wrapper Disk"
                 mkdir wrapfx
                 mkdir wrapgl
                 cp -r ../3dfx/build/* ./wrapfx/
                 rm -r ./wrapfx/lib* ./wrapfx/Makefile
                 cp -r ../mesa/build/* ./wrapgl/
                 rm -r ./wrapgl/Makefile
                 echo $(git rev-parse HEAD) > commit\ id.txt
                 cp -r ../texts/readme_nodx.txt readme.txt
                 mkisofs -JR -V 3DFX-WRAPPERS -o ../wrappers.iso ../iso
                 echo "Finished build at $(date)"


              - name: Uploading wrappers
                uses: actions/upload-artifact@v4
                with:
                  name: wrappers-${{ env.pkgver }}-artifact
                  path: ./wrappers
                  
